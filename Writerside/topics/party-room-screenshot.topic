<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="스크린샷 기능 추가하기" id="party-room-screenshot">

    <chapter title="ScreenShotController">
        <list>
            <li>스크린샷 기능을 담당하는 <path>ScreenShotController</path> 클래스를 추가합니다.</li>
            <li>스크린샷과 관련된 기능은 해당 클래스에서 처리합니다.</li>
        </list>

        <procedure title="ScreenShotController 추가하기">
            <step>
                <img alt="screenshot-1.png" src="screenshot-1.png"/>
                <p><path>Script | PartyRoom</path> 경로에 <path>ScreenShotController</path> 스크립트를 추가합니다.</p>
            </step>
            <step>
                <code-block lang="typescript">
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                    export default class ScreenShotController extends ZepetoScriptBehaviour {

                        public SaveScreenShot() {

                        }

                        public ShareScreenShot() {

                        }

                        public FeedScreenShot() {

                        }

                    }
                </code-block>
                <p>실제 기능 로직을 추가할 메서드를 미리 추가합니다.</p>
            </step>
            <step>
                <img alt="screenshot-2.png" src="screenshot-2.png"/>
                <p><path>ScreenShotController</path> 이름의 빈 오브젝트를 추가합니다.</p>
            </step>
            <step>
                <img alt="screenshot-3.png" src="screenshot-3.png"/>
                <p>위 오브젝트에 <path>ScreenShotController</path> 스크립트를 추가합니다.</p>
            </step>
        </procedure>

        <procedure title="UiController 에서 ScreenShotController 접근하기">
            <step>
                <list>
                    <li>버튼을 클릭하는 로직은 UiController 클래스에 있고, 스크린샷 동작을 담당하는 로직은 ScreenShotController 클래스에 있습니다.</li>
                    <li>버튼을 클릭하면, 스크린샷을 동작시키기 위해 UiController 와 ScreenShotController 를 연결해주어야 합니다.</li>
                    <li>주로 이런 경우 프로퍼티로 추가하여 연결시키게 됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="typescript">
                    <![CDATA[
                    import { Button } from 'UnityEngine.UI';
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                    import ScreenShotController from './ScreenShotController';
                    import { GameObject } from 'UnityEngine';

                    export default class UiController extends ZepetoScriptBehaviour {

                        public screenShotController: GameObject;

                        public saveScreenShotBtn: Button;
                        public shareScreenShotBtn: Button;
                        public feedScreenShotBtn: Button;
                        public playGestureBtn: Button;
                        public stopGestureBtn: Button;
                        public interactionBtn: Button;

                        Start() {
                            var screenShotCont = this.screenShotController.GetComponent<ScreenShotController>();

                            this.interactionBtn.interactable = false;

                            this.saveScreenShotBtn.onClick.AddListener(() => {
                                // save
                            });
                            this.shareScreenShotBtn.onClick.AddListener(() => {
                                // share
                            });
                            this.feedScreenShotBtn.onClick.AddListener(() => {
                                // feed
                            });
                            this.playGestureBtn.onClick.AddListener(() => {
                                // play gesture
                            });
                            this.stopGestureBtn.onClick.AddListener(() => {
                                // stop gesture
                            });
                            this.interactionBtn.onClick.AddListener(() => {
                                // interaction
                            });
                        }

                    }
                    ]]>
                </code-block>
                <list>
                    <li>UiController 가 ScreenShotController 를 접근하기 위해 <path>GameObject</path> 의 프로퍼티를 추가해 줍니다.</li>
                    <li>해당 게임 오브젝트에서 <path>GetComponent</path> 메서드를 통해 실제로 필요한 <path>ScreenShotController</path> 를 가져올 수 있습니다.</li>
                </list>
            </step>
            <step>
                <img alt="screenshot-4.png" src="screenshot-4.png"/>
                <p>UiController 인스펙터에서 ScreenShotController 오브젝트를 연결해줍니다.</p>
            </step>
            <step>
                <code-block lang="typescript">
                    <![CDATA[
                    Start() {
                        var screenShotCont = this.screenShotController.GetComponent<ScreenShotController>();

                        this.interactionBtn.interactable = false;

                        this.saveScreenShotBtn.onClick.AddListener(() => {
                            // save
                            screenShotCont.SaveScreenShot();
                        });
                        this.shareScreenShotBtn.onClick.AddListener(() => {
                            // share
                            screenShotCont.ShareScreenShot();
                        });
                        this.feedScreenShotBtn.onClick.AddListener(() => {
                            // feed
                            screenShotCont.FeedScreenShot();
                        });
                        this.playGestureBtn.onClick.AddListener(() => {
                            // play gesture
                        });
                        this.stopGestureBtn.onClick.AddListener(() => {
                            // stop gesture
                        });
                        this.interactionBtn.onClick.AddListener(() => {
                            // interaction
                        });
                    }
                    ]]>
                </code-block>
                <p><path>screenShotCont</path> 에서 각각 버튼에 맞는 메서드를 호출해줍니다.</p>
            </step>
        </procedure>

        <procedure title="static 알아보기">
            <step>
                <code-block lang="typescript">
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                    export default class ScreenShotController extends ZepetoScriptBehaviour {

                        public static staticNumber: number;

                        public SaveScreenShot() {

                        }

                        public ShareScreenShot() {

                        }

                        public FeedScreenShot() {

                        }

                        public static StaticMethod() {

                        }

                    }
                </code-block>
                <list>
                    <li><path>static</path> 은 프로퍼티와 메서드에 모두 추가될 수 있습니다.</li>
                    <li>static 프로퍼티 <path>staticNumber</path> 를 추가합니다.</li>
                    <li>static 메서드 <path>StaticMethod()</path> 를 추가합니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="typescript">
                    this.saveScreenShotBtn.onClick.AddListener(() => {
                        // save
                        this.screenShotController.SaveScreenShot();

                        ScreenShotController.StaticMethod();
                        ScreenShotController.staticNumber++;
                        ScreenShotController.SaveScreenShot() // ERROR!!
                    });
                </code-block>
                <list>
                    <li><path>static</path> 을 사용하면, 클래스 이름인 <path>ScreenShotController</path> 이후에 바로 프로퍼티와 메서드를 사용할 수 있습니다.</li>
                    <li>static 으로 선언된 프로퍼티는 프로젝트에서 단 한개의 값만 가집니다.</li>
                    <li>static 으로 선언된 메서드 안에서는 static 프로퍼티만 사용이 가능합니다.</li>
                </list>
            </step>
        </procedure>

        <procedure title="싱글톤(Singleton) 알아보기">
            <step>
                <list>
                    <li>위에서 프로젝트에 단 하나의 값만 가지는 <path>static</path> 에 대해 알아보았습니다.</li>
                    <li><path>ScreenShotController</path> 는 스크린샷 로직을 담당하는 클래스로 프로젝트에 단 하나만 존재할 예정입니다.</li>
                    <li>기존에 UiController 는 ScreenShotController 에 접근하기 위해 프로퍼티로 선언해주고 오브젝트를 연결해 주었지만, 싱글톤을 사용하면 더 쉽게 ScreenShotController 에 접근할 수 있습니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="typescript">
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                    export default class ScreenShotController extends ZepetoScriptBehaviour {

                        public static instance: ScreenShotController;

                        public SaveScreenShot() {

                        }

                        public ShareScreenShot() {

                        }

                        public FeedScreenShot() {

                        }

                    }
                </code-block>
                <p>ScreenShotController 클래스에 <path>static ScreenShotController</path> 프로퍼티를 추가합니다.</p>
            </step>
            <step>
                <code-block lang="typescript">
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                        export default class ScreenShotController extends ZepetoScriptBehaviour {

                        public static instance: ScreenShotController;

                        Awake() {
                            ScreenShotController.instance = this;
                        }

                        public SaveScreenShot() {

                        }

                        public ShareScreenShot() {

                        }

                        public FeedScreenShot() {

                        }

                    }
                </code-block>
                <list>
                    <li><path>Awake</path> 메서드에 static 프로퍼티에 자기 자신을 뜻하는 <path>this</path> 를 대입합니다.</li>
                    <li><path>Awake</path> 는 Start 보다 먼저 호출되는 라이프사이클 메서드로 가장 먼저 호출됩니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="typescript">
                    <![CDATA[
                    import { Button } from 'UnityEngine.UI';
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                    import ScreenShotController from './ScreenShotController';
                    import { GameObject } from 'UnityEngine';

                    export default class UiController extends ZepetoScriptBehaviour {

                        public screenShotController: GameObject;

                        public saveScreenShotBtn: Button;
                        public shareScreenShotBtn: Button;
                        public feedScreenShotBtn: Button;
                        public playGestureBtn: Button;
                        public stopGestureBtn: Button;
                        public interactionBtn: Button;

                        Start() {
                            var screenShotCont = this.screenShotController.GetComponent<ScreenShotController>();

                            this.interactionBtn.interactable = false;

                            this.saveScreenShotBtn.onClick.AddListener(() => {
                                // save
                                ScreenShotController.instance.SaveScreenShot();
                            });
                            this.shareScreenShotBtn.onClick.AddListener(() => {
                                // share
                                ScreenShotController.instance.ShareScreenShot();
                            });
                            this.feedScreenShotBtn.onClick.AddListener(() => {
                                // feed
                                ScreenShotController.instance.FeedScreenShot();
                            });
                            this.playGestureBtn.onClick.AddListener(() => {
                                // play gesture
                            });
                            this.stopGestureBtn.onClick.AddListener(() => {
                                // stop gesture
                            });
                            this.interactionBtn.onClick.AddListener(() => {
                                // interaction
                            });
                        }

                    }
                    ]]>
                </code-block>
                <list>
                    <li>이제 screenShotCont 에서 메서드를 호출하는 것이 아닌 <path>ScreenShotController.instance</path> 에 접근해서 메서드를 호출할 수 있습니다.</li>
                    <li>ScreenShotController 는 프로젝트에 단 하나만 존재하므로, 인스펙터에서 연결해줘서 받은 screenShotCont 와 ScreenShotController.instance 는 같은 결과를 가집니다.</li>
                </list>
            </step>
            <step>
                <code-block lang="typescript">
                    import { Button } from 'UnityEngine.UI';
                    import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                    import ScreenShotController from './ScreenShotController';
                    import { GameObject } from 'UnityEngine';

                    export default class UiController extends ZepetoScriptBehaviour {

                        public saveScreenShotBtn: Button;
                        public shareScreenShotBtn: Button;
                        public feedScreenShotBtn: Button;
                        public playGestureBtn: Button;
                        public stopGestureBtn: Button;
                        public interactionBtn: Button;

                        Start() {
                            this.interactionBtn.interactable = false;

                            this.saveScreenShotBtn.onClick.AddListener(() => {
                                // save
                                ScreenShotController.instance.SaveScreenShot();
                            });
                            this.shareScreenShotBtn.onClick.AddListener(() => {
                                // share
                                ScreenShotController.instance.ShareScreenShot();
                            });
                            this.feedScreenShotBtn.onClick.AddListener(() => {
                                // feed
                                ScreenShotController.instance.FeedScreenShot();
                            });
                            this.playGestureBtn.onClick.AddListener(() => {
                                // play gesture
                            });
                            this.stopGestureBtn.onClick.AddListener(() => {
                                // stop gesture
                            });
                            this.interactionBtn.onClick.AddListener(() => {
                                // interaction
                            });
                        }

                    }
                </code-block>
                <p>싱글톤을 통해 메서드를 호출해 줬기 때문에 이제 따로 UiController 와 ScreenShotController 를 연결해줄 필요가 없어졌습니다.</p>
            </step>
        </procedure>

<!--        카메라 알아보기-->

<!--        렌더텍스처 알아보기-->

<!--        코루틴 알아보기-->

<!--        공유하기와 피드올리기도 적용하기-->
    </chapter>
</topic>