<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="enum(열거형)" id="enum">

    <p><control>enum(열거형)</control>은 코드의 가독성을 높이고 실수를 방지하는 데 도움이 되며, 명명된 상수 집합을 정의할 수 있습니다.</p>

    <procedure title="enum의 필요성">
        <step>
            <code-block lang="typescript">
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                export default class NewScript extends ZepetoScriptBehaviour {

                    Start() {
                        var myDirection: string = "North";
                        console.log(myDirection);
                    }

                }
            </code-block>
            <list>
                <li>예를 들어, <control>North, East, South, West</control>의 네 가지 중 하나의 값을 가지는 변수 <control>myDirection</control>이 필요하여 <control>string</control> 타입으로 선언한다고 가정해 보겠습니다.</li>
                <li>하지만, 변수 <control>myDirection</control> 값은 <control>string</control> 이기 때문에, "Apple"이나 "Banana"와 같은 아무 문자열이나 대입될 수 있습니다.</li>
                <li>또한, 오타가 발생할 수도 있으며 <control>North</control> 라는 값만 봐서는 <control>myDirection</control>의 값이 방향을 나타낸다고 바로 추론하기 어렵습니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="enum 기본 사용법">
        <step>
            <code-block lang="typescript">
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                enum Direction {
                    North,  // 0
                    East,   // 1
                    South,  // 2
                    West    // 3
                }

                export default class NewScript extends ZepetoScriptBehaviour {

                    Start() {
                        var myDirection: Direction = Direction.North;
                        console.log(myDirection);
                    }

                }
            </code-block>
            <list>
                <li><control>enum</control>을 사용하면 <control>myDirection</control>의 값으로 선언된 네 가지의 방향만 갖도록 제한할 수 있습니다.</li>
                <li>위 예제에서는 <control>Direction</control>이라는 enum을 정의하고, 각 멤버에는 자동으로 할당되는 숫자 값이 부여됩니다.</li>
                <li>따라서 <control>Direction.North</control>는 0을 나타냅니다.</li>
                <li><control>enum</control>은 <control>class</control> 밖에서 선언이 가능합니다.</li>
            </list>
        </step>

        <step>
            <tip>
                <p>실행 결과</p>
                <img alt="enum-1.png" src="enum-1.png"/>
            </tip>
        </step>
    </procedure>

    <procedure title="enum 멤버에 값 할당하기">
        <step>
            <code-block lang="typescript">
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                enum Direction {
                    North = 1,
                    East = 2,
                    South = 4,
                    West = 8
                }

                export default class NewScript extends ZepetoScriptBehaviour {

                    Start() {
                        var myDirection: Direction = Direction.East;
                        console.log(myDirection);
                    }

                }
            </code-block>
            <list>
                <li>enum 멤버에 직접 값을 할당하여 숫자 또는 문자열을 사용할 수 있습니다.</li>
                <li>이렇게 작성하면 각 멤버가 특정 값을 갖게 되므로, 코드를 더 명확하게 작성할 수 있습니다.</li>
            </list>
        </step>
        <step>
            <tip>
                <p>실행 결과</p>
                <img alt="enum-2.png" src="enum-2.png"/>
            </tip>
        </step>
    </procedure>

    <procedure title="문자열 enum">
        <step>
            <code-block lang="typescript">
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                enum Fruit {
                    Apple = "apple",
                    Banana = "banana",
                    Orange = "orange"
                }

                export default class NewScript extends ZepetoScriptBehaviour {

                    Start() {
                        var myFruit: Fruit = Fruit.Banana;
                        console.log(myFruit);
                    }

                }
            </code-block>
            <list>
                <li>문자열 enum을 사용하면 각 멤버에 문자열 값을 할당할 수 있습니다.</li>
                <li>이렇게 작성하면 코드의 가독성이 향상되며, 실수를 방지할 수 있습니다.</li>
            </list>
        </step>
        <step>
            <tip>
                <p>실행 결과</p>
                <img alt="enum-3.png" src="enum-3.png"/>
            </tip>
        </step>
    </procedure>
</topic>