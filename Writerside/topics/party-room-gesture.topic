<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="제스쳐 기능 추가하기" id="party-room-gesture">

<!--    UiController 와 CharacterPlayer 연결하기-->
    <procedure title="UiController 와 CharacterPlayer 연결하기" id="ui_controller_character_player_">
        <step>
            <list>
                <li>제페토 캐릭터의 제스처를 재생하고 중지하는 코드는 <path>CharacterPlayer</path> 에 추가할 예정입니다.</li>
                <li>제스처가 시작되는 버튼에 대한 로직은 <path>UiController</path> 에 작성됩니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                <![CDATA[
                import { CharacterController, LayerMask, Physics, Ray, RaycastHit, Vector3 } from 'UnityEngine';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'

                export default class CharacterPlayer extends ZepetoScriptBehaviour {

                    Start() {
                        this.gameObject.layer = LayerMask.NameToLayer("Player");
                    }

                    FixedUpdate() {
                        var ray = new Ray(this.transform.position, Vector3.down);
                        var ref = $ref<RaycastHit>();
                        if (Physics.Raycast(ray, ref, 1)) {
                            var hitInfo = $unref(ref);
                            var hitObj = hitInfo.collider.gameObject;
                            if (hitObj.layer == LayerMask.NameToLayer("Platform")) {
                                if (this.transform.parent != hitObj.transform) {
                                    this.transform.SetParent(hitObj.transform);
                                }
                                return;
                            }
                        }

                        if (this.transform.parent != null) {
                            this.transform.parent = null;
                        }
                    }

                    public PlayRandomGesture() {
                        // 랜덤 제스처를 시작.
                    }

                    public StopGesture() {
                        // 제스처를 중지.
                    }

                }
                ]]>
            </code-block>
            <p>CharacterPlayer 클래스에 랜덤 제스처를 시작하는 <path>PlayRandomGesture</path> 메서드와 제스처를 중지하는 <path>StopGesture</path> 메서드를 추가합니다.</p>
        </step>
        <step>
            <code-block lang="typescript">
                import { Button } from 'UnityEngine.UI';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                import ScreenShotController from './ScreenShotController';
                import CharacterPlayer from '../Common/CharacterPlayer';

                export default class UiController extends ZepetoScriptBehaviour {

                    public saveScreenShotBtn: Button;
                    public shareScreenShotBtn: Button;
                    public feedScreenShotBtn: Button;
                    public playGestureBtn: Button;
                    public stopGestureBtn: Button;
                    public interactionBtn: Button;

                    public characterPlayer: CharacterPlayer;

                    Start() {
                        this.interactionBtn.interactable = false;

                        this.saveScreenShotBtn.onClick.AddListener(() => {
                            // save
                            ScreenShotController.instance.SaveScreenShot();
                        });
                        this.shareScreenShotBtn.onClick.AddListener(() => {
                            // share
                            ScreenShotController.instance.ShareScreenShot();
                        });
                        this.feedScreenShotBtn.onClick.AddListener(() => {
                            // feed
                            ScreenShotController.instance.FeedScreenShot();
                        });
                        this.playGestureBtn.onClick.AddListener(() => {
                            // play gesture
                            this.characterPlayer.PlayRandomGesture();
                        });
                        this.stopGestureBtn.onClick.AddListener(() => {
                            // stop gesture
                            this.characterPlayer.StopGesture();
                        });
                        this.interactionBtn.onClick.AddListener(() => {
                            // interaction
                        });
                    }

                }
            </code-block>
            <list>
                <li><path>CharacterPlayer</path> 클래스의 프로퍼티를 추가합니다.</li>
                <li>제스처 관련 버튼 클릭 시, characterPlayer 에서 관련 메서드를 호출합니다.</li>
                <li>characterPlayer 는 실행 시에 생성되는 오브젝트이기 때문에 코드로 연결해주어야 합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                import { Button } from 'UnityEngine.UI';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                import ScreenShotController from './ScreenShotController';
                import CharacterPlayer from '../Common/CharacterPlayer';

                export default class UiController extends ZepetoScriptBehaviour {

                    public static instance: UiController;

                    public saveScreenShotBtn: Button;
                    public shareScreenShotBtn: Button;
                    public feedScreenShotBtn: Button;
                    public playGestureBtn: Button;
                    public stopGestureBtn: Button;
                    public interactionBtn: Button;

                    public characterPlayer: CharacterPlayer;

                    Awake() {
                        UiController.instance = this;
                    }

                    Start() {
                        this.interactionBtn.interactable = false;

                        this.saveScreenShotBtn.onClick.AddListener(() => {
                            // save
                            ScreenShotController.instance.SaveScreenShot();
                        });
                        this.shareScreenShotBtn.onClick.AddListener(() => {
                            // share
                            ScreenShotController.instance.ShareScreenShot();
                        });
                        this.feedScreenShotBtn.onClick.AddListener(() => {
                            // feed
                            ScreenShotController.instance.FeedScreenShot();
                        });
                        this.playGestureBtn.onClick.AddListener(() => {
                            // play gesture
                            this.characterPlayer.PlayRandomGesture();
                        });
                        this.stopGestureBtn.onClick.AddListener(() => {
                            // stop gesture
                            this.characterPlayer.StopGesture();
                        });
                        this.interactionBtn.onClick.AddListener(() => {
                            // interaction
                        });
                    }

                }
            </code-block>
            <p>외부에서 UiController 의 characterPlayer 프로퍼티를 설정해주도록 UiController 를 싱글톤으로 변경합니다.</p>
        </step>
        <step>
            <code-block lang="typescript">
                <![CDATA[
                import { LocalPlayer, SpawnInfo, ZepetoCharacter, ZepetoPlayers } from 'ZEPETO.Character.Controller';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                import { WorldService } from 'ZEPETO.World';
                import CharacterPlayer from './CharacterPlayer';
                import ScreenShotController from '../PartyRoom/ScreenShotController';
                import UiController from '../PartyRoom/UiController';

                export default class CharacterController extends ZepetoScriptBehaviour {

                    Start() {
                        // Grab the user id specified from logging into zepeto through the editor.
                        ZepetoPlayers.instance.CreatePlayerWithUserId(WorldService.userId, new SpawnInfo(), true);
                        ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(() => {
                            const player: LocalPlayer = ZepetoPlayers.instance.LocalPlayer;
                            ScreenShotController.instance.camera = player.zepetoCamera.camera;

                            // 캐릭터에 내가 제어할 수 있는 스크립트 추가.
                            var zepetoCharacter: ZepetoCharacter = player.zepetoPlayer.character;
                            var characterPlayer = zepetoCharacter.gameObject.AddComponent<CharacterPlayer>();

                            UiController.instance.characterPlayer = characterPlayer;
                        });
                    }

                }
                ]]>
            </code-block>
            <p>CharacterController 에서 제페토 캐릭터 생성 시, CharacterPlayer 스크립트를 추가해주는 부분에서 UiController 의 characterPlayer 도 설정해줍니다.</p>
        </step>
    </procedure>

<!--    재생 가능한 제스처 목록 가져오기 -->
    <procedure title="재생 가능한 제스처 목록 가져오기">
        <step>
            <list>
                <li>제페토에서는 기본적으로 제페토 캐릭터가 사용할 수 있는 다양한 제스처를 제공합니다.</li>
                <li>사용할 수 있는 제스처의 목록을 제페토가 제공해주는 메서드를 호출하여 가져올 수 있습니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                <![CDATA[
                import { LocalPlayer, SpawnInfo, ZepetoCharacter, ZepetoPlayers } from 'ZEPETO.Character.Controller';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                import { OfficialContentType, WorldService, ZepetoWorldContent } from 'ZEPETO.World';
                import CharacterPlayer from './CharacterPlayer';
                import ScreenShotController from '../PartyRoom/ScreenShotController';
                import UiController from '../PartyRoom/UiController';

                export default class CharacterController extends ZepetoScriptBehaviour {

                    Start() {
                        // Grab the user id specified from logging into zepeto through the editor.
                        ZepetoPlayers.instance.CreatePlayerWithUserId(WorldService.userId, new SpawnInfo(), true);
                        ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(() => {
                            const player: LocalPlayer = ZepetoPlayers.instance.LocalPlayer;
                            ScreenShotController.instance.camera = player.zepetoCamera.camera;

                            // 캐릭터에 내가 제어할 수 있는 스크립트 추가.
                            var zepetoCharacter: ZepetoCharacter = player.zepetoPlayer.character;
                            var characterPlayer = zepetoCharacter.gameObject.AddComponent<CharacterPlayer>();

                            UiController.instance.characterPlayer = characterPlayer;
                            this.ContentRequest(characterPlayer);
                        });
                    }

                    private ContentRequest(characterPlayer: CharacterPlayer) {
                        ZepetoWorldContent.RequestOfficialContentList(OfficialContentType.All, contents => {

                        });
                    }

                }
                ]]>
            </code-block>
            <list>
                <li>제스처를 가져오는 기능을 하게될 메서드 ContentRequest 를 추가하고 호출해 줍니다.</li>
                <li><path>ZepetoWorldContent.RequestOfficialContentList</path> 메서드를 사용하여 재생가능한 제스처의 목록을 가져올 수 있습니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                private ContentRequest(characterPlayer: CharacterPlayer) {
                    ZepetoWorldContent.RequestOfficialContentList(OfficialContentType.All, contents => {
                        contents.forEach(content => console.log(`${content.Id} : ${content.Title}`));
                    });
                }
            </code-block>
            <list>
                <li>제페토에서 제공하는 RequestOfficialContentList 메서드를 사용하면, 제스처 리스트를 가져오고 contents 변수로 반환해 줍니다.</li>
                <li><path>contents</path> 는 제페토에서 제공하는 클래스인 Content 타입의 리스트 변수입니다.</li>
                <li>리스트 변수는 <path>foreach</path> 구문을 사용하여 각 요소를 순회할 수 있습니다.</li>
                <li>전달받은 제스처 리스트를 순회하면서 각각의 제스처에 대한 정보를 출력하는 로그를 추가합니다.</li>
            </list>
        </step>
        <step>
            <img alt="add-gesture-1.png" src="add-gesture-1.png"/>
            <p>실행 시, 다양한 제스처의 정보가 로그로 출력되는 것을 확인할 수 있습니다.</p>
        </step>
        <step>
            <code-block lang="typescript">
                <![CDATA[
                import { CharacterController, LayerMask, Physics, Ray, RaycastHit, Vector3 } from 'UnityEngine';
                import { ZepetoScriptBehaviour } from 'ZEPETO.Script'
                import { Content } from 'ZEPETO.World';

                export default class CharacterPlayer extends ZepetoScriptBehaviour {

                    private contents: Content[];

                    Start() {
                        this.gameObject.layer = LayerMask.NameToLayer("Player");
                    }

                    FixedUpdate() {
                        var ray = new Ray(this.transform.position, Vector3.down);
                        var ref = $ref<RaycastHit>();
                        if (Physics.Raycast(ray, ref, 1)) {
                            var hitInfo = $unref(ref);
                            var hitObj = hitInfo.collider.gameObject;
                            if (hitObj.layer == LayerMask.NameToLayer("Platform")) {
                                if (this.transform.parent != hitObj.transform) {
                                    this.transform.SetParent(hitObj.transform);
                                }
                            return;
                            }
                        }

                        if (this.transform.parent != null) {
                            this.transform.parent = null;
                        }
                    }

                    public PlayRandomGesture() {
                        // 랜덤 제스처를 시작.
                    }

                    public StopGesture() {
                        // 제스처를 중지.
                    }

                    public SetContents(contents: Content[]) {
                        this.contents = contents;
                    }

                }
                ]]>
            </code-block>
            <list>
                <li>실제로 제스처를 재생시켜주는 로직은 <path>CharacterPlayer</path> 클래스에서 진행할 것이기 때문에 제스처 목록인 Content[] 타입의 프로퍼티를 추가합니다.</li>
                <li>외부에서 contents 프로퍼티를 설정해줄 수 있도록 SetContent 메서드도 추가합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                private ContentRequest(characterPlayer: CharacterPlayer) {
                    ZepetoWorldContent.RequestOfficialContentList(OfficialContentType.All, contents => {
                        contents.forEach(content => console.log(`${content.Id} : ${content.Title}`));
                        characterPlayer.SetContents(contents);
                    });
                }
            </code-block>
            <p>로그 출력 이후에, SetContents 메서드를 호출하여 contents 프로퍼티를 연결해 줍니다.</p>
        </step>
    </procedure>

<!--    랜덤으로 제스처 하나 뽑기-->
    <procedure title="랜덤으로 제스처 하나 뽑기">
        <step>
            <list>
                <li>이제 넘겨받은 제스처 목록 중에 랜덤으로 한개의 제스처를 뽑아야 합니다.</li>
                <li>랜덤한 난수를 얻기 위해서 <path>Math.random()</path> 메서드를 사용합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                public PlayRandomGesture() {
                    // 랜덤 제스처를 시작.
                    var randomIndex = Math.floor(Math.random() * this.contents.length);
                    var randomContent = this.contents[randomIndex];
                    console.log(`random: ${randomContent.Id} : ${randomContent.Title}`);
                }
            </code-block>
            <list>
                <li><path>Math.random</path> 메서드를 사용하면 0~1 사이의 랜덤한 값을 가져옵니다.</li>
                <li>Math.random()에 contents 리스트의 길이를 곱하면 0~contents 리스트 길이까지의 랜덤한 값이 나옵니다.</li>
                <li>위에서 가져온 값은 자연수가 아니라 소수점이 붙는 소수로 <path>Math.floor</path> 메서드를 사용하여 자연수로 내림할 수 있습니다.</li>
            </list>
        </step>
        <step>
            <img alt="add-gesture.png" src="add-gesture.png"/>
            <p>실행 후 play 버튼을 클릭할 때마다, 랜덤한 제스처에 대한 로그가 출력되는 것을 확인할 수 있습니다.</p>
        </step>
    </procedure>

<!--    제스처 시작하기-->
    <procedure title="제스처 재생하기">
        <step>
            <list>
                <li>제스처는 애니메이션으로 유니티 상으로는 AnimationClip 으로 제공됩니다.</li>
                <li>애니메이션 클립은 제페토에서 다운받아야 사용할 수 있는 제스처도 있습니다.</li>
                <li>제스처 재생은 <path>ZepetoCharacter.SetGesture</path> 매서드를 사용하여 재생시킬 수 있습니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                <![CDATA[
                export default class CharacterPlayer extends ZepetoScriptBehaviour {

                    private zepetoCharacter: ZepetoCharacter;
                    private contents: Content[];

                    Start() {
                        this.zepetoCharacter = this.gameObject.GetComponent<ZepetoCharacter>();
                        this.gameObject.layer = LayerMask.NameToLayer("Player");
                    }

                    ...
                ]]>
            </code-block>
            <list>
                <li>ZepetoCharacter 를 사용하기 위해 프로퍼티를 추가합니다.</li>
                <li>CharacterPlayer 가 추가된 오브젝트에는 이미 ZepetoCharacter 스크립트도 가지고 있기 때문에 GetComponent 를 사용하여 바로 가져올 수
                    있습니다.
                </li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                public PlayRandomGesture() {
                    // 랜덤 제스처를 시작.
                    var randomIndex = Math.floor(Math.random() * this.contents.length);
                    var randomContent = this.contents[randomIndex];
                    console.log(`random: ${randomContent.Id} : ${randomContent.Title}`);

                    if (!randomContent.IsDownloadedAnimation) {
                        randomContent.DownloadAnimation(() => {
                            this.zepetoCharacter.SetGesture(randomContent.AnimationClip);
                        });
                    } else {
                        this.zepetoCharacter.SetGesture(randomContent.AnimationClip);
                    }
                }
            </code-block>
            <list>
                <li>Content.IsDownloadedAnimation 프로퍼티에 접근하여 해당 제스처가 다운로드 완료된 리소스인지 확인할 수 있습니다.</li>
                <li>다운로드가 완료된 제스처라면 바로 SetGestrue 메서드를 호출하여 제스처를 재생시킵니다.</li>
                <li>다운로드가 아직 안된 제스처라면, Content.DownloadAnimation 메서드를 호출하여 제스처 리소스를 다운로드 받을 수 있습니다.</li>
                <li>다운로드가 완료되면 SetGesture 메서드를 호출하여 제스처를 재생시킬 수 있습니다.</li>
            </list>
        </step>
        <step>
            <img alt="add-gesture-3.png" src="add-gesture-3.png"/>
            <p>실행 후 play 버튼을 클릭하면, 캐릭터가 제스처를 진행하는 모습을 확인할 수 있습니다.</p>
        </step>
    </procedure>

<!--    제스처 중지하기-->
    <procedure title="제스처 중지하기">
        <step>
            <list>
                <li>제스처 중에는 모션을 진행한 다음 다시 원래 상태로 돌아오는 모션이 있는 반면에 계속해서 모션을 반복하는 제스처도 있습니다.</li>
                <li>제스처 중에는 캐릭터를 움직일 수 없으며, 제스처를 중지해야 이동이 가능합니다.</li>
                <li>제스처 중지 기능 역시 ZepetoCharacter 클래스에서 메서드로 제공합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                public StopGesture() {
                    // 제스처를 중지.
                    this.zepetoCharacter.CancelGesture();
                }
            </code-block>
            <p>ZepetoCharacter.CancelGesture 메서드를 사용하여 제스처를 중단할 수 있습니다.</p>
        </step>
        <step>
            <img alt="add-gesture-4.png" src="add-gesture-4.png"/>
            <p>실행 후 제스처 진행 중에 stop 버튼을 클릭하면, 모션을 취소하고 원래 상태로 돌아옵니다.</p>
        </step>
    </procedure>
</topic>