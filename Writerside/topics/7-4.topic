<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="인벤토리 데이터 적용" id="7-4">

    <procedure title="인벤토리 스크립트 추가">
        <step>
            <img alt="7-4-1.png" src="7-4-1.png"/>
            <list>
                <li>내가 보유한 아이템 정보를 가지고 있을 스크립트를 하나 추가합니다.</li>
                <li>Inventory 이름으로 추가합니다.</li>
            </list>
        </step>
        <step>
            <code-block lang="typescript">
                export default class Inventory extends ZepetoScriptBehaviour {

                    public static instance: Inventory;

                    Awake() {
                        Inventory.instance = this;
                    }

                }
            </code-block>
            <list>
                <li>인벤토리 스크립트는 내가 보유한 아이템 정보를 가지고 있는 단 하나의 클래스입니다.</li>
                <li>따라서, 접근하기 편리하도록 싱글톤으로 설정해줍니다.</li>
            </list>
        </step>
        <step>
            <img alt="7-4-2.png" src="7-4-2.png"/>
            <list>
                <li>최상위에 빈 오브젝트를 추가하고 이름을 Inventory로 변경합니다.</li>
            </list>
        </step>
        <step>
            <img alt="7-4-3.png" src="7-4-3.png"/>
            <list>
                <li>해당 오브젝트에 Inventory 스크립트 컴포넌트를 추가합니다.</li>
            </list>
        </step>
    </procedure>

    <procedure title="아이템 데이터 형식 추가">
        <step>
            <code-block lang="typescript">
                export interface ItemInfo {
                    itemId: string;
                    count: number;
                }

                export default class Inventory extends ZepetoScriptBehaviour {

                    public static instance: Inventory;

                    Awake() {
                        Inventory.instance = this;
                    }

                }
            </code-block>
            <list>
                <li>하나의 아이템을 표현하기 위한 형식을 나타내는 ItemInfo 를 상단에 추가합니다.</li>
                <li>데이터의 형식을 표현하기 위해서는 interface 를 사용합니다.</li>
                <li>export는 외부에서 접근할 수 있도록 추가하는 부분입니다.</li>
                <li>ItemInfo 는 단순하게 어느 아이템인지 나타내는 itemId와 개수를 나타내는 count로 구성됩니다.</li>
            </list>
            <tip>typescript 기준으로 interface를 설명해줘.</tip>
        </step>
        <step>
            <code-block lang="typescript">
                export default class Inventory extends ZepetoScriptBehaviour {

                    public static instance: Inventory;

                    public items: ItemInfo[];

                    Awake() {
                        Inventory.instance = this;
                    }

                }
            </code-block>
            <list>
                <li>아이템을 여러개 보유할 수 있기 때문에 배열의 형태로 프로퍼티를 추가합니다.</li>
                <li>items는 내가 보유한 아이템들을 나타냅니다.</li>
                <li>데이터 타입 이후에 [] 가 붙으면 해당 데이터 여러개를 나타내는 배열입니다.</li>
            </list>
            <tip>typescript 기준으로 배열 설명해줘.</tip>
        </step>
        <step>
            <code-block lang="typescript">
                export default class Inventory extends ZepetoScriptBehaviour {

                    public static instance: Inventory;

                    public items: ItemInfo[];

                    Awake() {
                        Inventory.instance = this;
                        this.items = [
                            {"itemId": "stoune", "count": 2},
                            {"itemId": "weapon", "count": 3},
                        ];
                    }

                }
            </code-block>
            <list>
                <li>초기 데이터를 넣어주기 위해 this.items에 데이터를 할당해 줍니다.</li>
                <li>해당 프로퍼티는 배열 타입이기 때문에 [ ] 로 값을 할당합니다.</li>
                <li>[ ] 내부에 여러개의 ItemInfo 데이터가 포함될 수 있습니다.</li>
                <li>ItemInfo 는 json 형태로 추가가 가능합니다.</li>
                <li>두 개의 초기 아이템이 추가된 모습입니다.</li>
            </list>
            <tip>typescript 기준으로 json 설명해줘.</tip>
        </step>
    </procedure>
</topic>